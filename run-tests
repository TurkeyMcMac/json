#!/usr/bin/env perl
use strict;

my $dirname = @ARGV[0];

my %tests;

print "TEST\tRESULT\tEXIT CODE\tERROR NAME\n";

my @files;
opendir(DIR, $dirname) or die "Unable to open directory '$dirname'";
@files = grep {/^[^.]/} readdir(DIR);
closedir(DIR);
foreach my $file (@files) {
	my $pid = fork();
	if ($pid == 0) {
		$SIG{'TERM'} = sub {
			# No core dump.
			exit 128 + 15;
		};
		chdir $dirname;
		exec("../parse", $file);
	} elsif ($pid  > 0) {
		$tests{$file} = $pid;
	} else {
		print STDERR "Skipping '$file'; fork failed\n";
	}
}

my @error_messages = ();
if (open my $header, "<", "json.h") {
	my $begun = 0;
	my $idx = 0;
	while (my $line = <$header>) {
		if ($line =~ /enum json_type \{/) {
			last;
		}
	}
	while (my $line = <$header>) {
		if ($line =~ /^\tJSON_(?:ERROR_)?(\w+)/) {
			push @error_messages, $1;
		} elsif ($line =~ /\};/) {
			last;
		}
	}
}
@error_messages[0] = "";

while (my ($file, $pid) = (each %tests)) {
	my $kill_signal = 15;
	my $timed_out = 0;
	$SIG{'ALRM'} = sub {
		$timed_out = 1;
		kill $kill_signal, $pid;
	};
	alarm 1;
	waitpid $pid, 0;
	alarm 0;
	my ($result, $exit, $message);
	if ($timed_out) {
		$result = "TIMED OUT";
		$exit = 128 + $kill_signal;
	} else {
		my $test_type = substr($file, 0, 1);
		my ($zero, $nonzero);
		if ($test_type eq 'y') {
			$zero = "SUCCEEDED";
			$nonzero = "FAILED";
		} elsif ($test_type eq 'n') {
			$nonzero = "SUCCEEDED";
			$zero = "FAILED";
		} else {
			$nonzero = "SUCCEEDED";
			$zero = "SUCCEEDED";
		}
		$exit = $? >> 8;
		if ($exit) {
			$result = $nonzero;
		} else {
			$result = $zero;
		}
		if ($exit <= $#error_messages) {
			$message = @error_messages[$exit];
		}
	}
	printf "%s\t%s\t%03d\t%s\n", $file, $result, $exit, $message;
}
